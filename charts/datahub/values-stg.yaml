# Values to start up datahub after starting up the datahub-prerequisites chart with "prerequisites" release name
# This chart has been copied from upstream and the configuration changed as needed.
datahub-gms:
  enabled: true
  image:
    repository: acryldata/datahub-gms
    tag: "v0.13.2"
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 1Gi
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 30
    failureThreshold: 8
  readinessProbe:
    initialDelaySeconds: 120
    periodSeconds: 30
    failureThreshold: 8
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4318"
 
datahub-frontend:
  enabled: true
  image:
    repository: acryldata/datahub-frontend-react
    tag: "v0.13.2"
  resources:
    limits:
      cpu: 1000m
      memory: 1400Mi
    requests:
      cpu: 100m
      memory: 512Mi
  ingress:
    enabled: false
  defaultUserCredentials: {}
  service:
    extraLabels: {}
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "4318"
  extraEnvs:
    - name: AUTH_OIDC_ENABLED
      value: "true"
    - name: AUTH_OIDC_DISCOVERY_URI
      value: https://accounts.google.com/.well-known/openid-configuration
    - name: AUTH_OIDC_BASE_URL
      value: "https://datahub.ps6.stg.canonical.com"
    - name: AUTH_OIDC_SCOPE
      value: "openid profile email"
    - name: AUTH_OIDC_CLIENT_ID
      valueFrom:
        secretKeyRef:
          name: datahub-oidc-secret
          key: id
    - name: AUTH_OIDC_CLIENT_SECRET
      valueFrom:
        secretKeyRef:
          name: datahub-oidc-secret
          key: secret
    - name: AUTH_OIDC_USER_NAME_CLAIM
      value: email
    - name: HTTP_PROXY_HOST
      value: squid.internal
    - name: HTTP_PROXY_PORT
      value: "3128"
    - name: HTTPS_PROXY_HOST
      value: squid.internal
    - name: HTTPS_PROXY_PORT
      value: "3128"
    - name: HTTP_NON_PROXY_HOSTS
      value: "localhost|datahub-datahub-gms"
    - name: AUTH_JAAS_ENABLED
      value: "false"
    - name: AUTH_VERBOSE_LOGGING
      value: "true"

acryl-datahub-actions:
  enabled: true
  image:
    repository: acryldata/datahub-actions
    tag: "v0.0.15"
  resources:
    limits:
      cpu: 500m
      memory: 2Gi
    requests:
      cpu: 300m
      memory: 256Mi

datahub-mae-consumer:
  image:
    repository: acryldata/datahub-mae-consumer
  resources:
    limits:
      cpu: 500m
      memory: 1536Mi
    requests:
      cpu: 100m
      memory: 256Mi

datahub-mce-consumer:
  image:
    repository: acryldata/datahub-mce-consumer
  resources:
    limits:
      cpu: 500m
      memory: 1536Mi
    requests:
      cpu: 100m
      memory: 256Mi

datahub-ingestion-cron:
  enabled: false
  image:
    repository: acryldata/datahub-ingestion

elasticsearchSetupJob:
  enabled: true
  image:
    repository: acryldata/datahub-elasticsearch-setup
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  extraInitContainers: []
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation
  podAnnotations: {}
  extraSidecars: []

kafkaSetupJob:
  enabled: true
  image:
    repository: acryldata/datahub-kafka-setup
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      cpu: 300m
      memory: 768Mi
  extraInitContainers: []
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation
  podAnnotations: {}
  extraSidecars: []

mysqlSetupJob:
  enabled: false
  image:
    repository: acryldata/datahub-mysql-setup
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  extraInitContainers: []
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation
  podAnnotations: {}
  extraSidecars: []

postgresqlSetupJob:
  enabled: true
  image:
    repository: acryldata/datahub-postgres-setup
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  extraInitContainers: []
  podSecurityContext:
    fsGroup: 1000
  securityContext:
    runAsUser: 1000
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-5"
    helm.sh/hook-delete-policy: before-hook-creation
  podAnnotations: {}
  extraSidecars: []

## No code data migration
datahubUpgrade:
  enabled: true
  image:
    repository: acryldata/datahub-upgrade
  batchSize: 1000
  batchDelayMs: 100
  noCodeDataMigration:
    image:
      command:
      args: []
    sqlDbType: "POSTGRES"
  podSecurityContext: {}
  securityContext: {}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-weight: "-2"
    helm.sh/hook-delete-policy: before-hook-creation
  podAnnotations: {}
  extraSidecars: []
  cleanupJob:
    image:
      command:
      args: []
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 300m
        memory: 256Mi
    concurrencyPolicy: Allow
    extraSidecars: []
  restoreIndices:
    image:
      command:
      args: []
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 300m
        memory: 256Mi
    concurrencyPolicy: Allow
    extraSidecars: []
  extraInitContainers: []

## Runs system update processes
## Includes: Elasticsearch Indices Creation/Reindex (See global.elasticsearch.index for additional configuration)
datahubSystemUpdate:
  image:
    repository: acryldata/datahub-upgrade
  podSecurityContext: {}
  securityContext: {}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-weight: "-4"
    helm.sh/hook-delete-policy: before-hook-creation
  nonblocking:
    enabled: false
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-delete-policy: before-hook-creation
    image:
      args:
  podAnnotations: {}
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 300m
      memory: 256Mi
  extraSidecars: []
  extraInitContainers: []

global:
  strict_mode: true
  graph_service_impl: elasticsearch
  datahub_analytics_enabled: false
  datahub_standalone_consumers_enabled: false

  elasticsearch:
    host: "opensearch-cluster-master"
    port: "9200"
    skipcheck: "false"
    insecure: "false"
    useSSL: "false"

    ## The following section controls when and how reindexing of elasticsearch indices are performed
    index:
      enableMappingsReindex: true
      enableSettingsReindex: true
      upgrade:
        cloneIndices: true
        allowDocCountMismatch: false

    ## Search related configuration
    search:
      ## Maximum terms in aggregations
      maxTermBucketSize: 20

      ## Configuration around exact matching for search
      exactMatch:
        ## if false will only apply weights, if true will exclude non-exact
        exclusive: false
        ## include prefix exact matches
        withPrefix: true
        ## boost multiplier when exact with case
        exactFactor: 2.0
        ## boost multiplier when exact prefix
        prefixFactor: 1.6
        ## stacked boost multiplier when case mismatch
        caseSensitivityFactor: 0.7
        ## enable exact match on structured search
        enableStructured: true

      ## Configuration for graph service dao
      graph:
        ## graph dao timeout seconds
        timeoutSeconds: 50
        ## graph dao batch size
        batchSize: 1000
        ## graph dao max result size
        maxResult: 10000

      custom:
        enabled: false
        # See documentation: https://datahubproject.io/docs/how/search/#customizing-search
        config:
          # Notes:
          #
          # First match wins
          #
          # queryRegex = Java regex syntax
          #
          # functionScores - See the following for function score syntax
          # https://www.elastic.co/guide/en/elasticsearch/reference/7.17/query-dsl-function-score-query.html

          queryConfigurations:
            # Select *
            - queryRegex: '[*]|'
              simpleQuery: false
              prefixMatchQuery: false
              exactMatchQuery: false
              boolQuery:
                must_not:
                  term:
                    deprecated:
                      value: true
              functionScore:
                functions:
                  - filter:
                      term:
                        materialized:
                          value: true
                    weight: 0.8
                score_mode: multiply
                boost_mode: multiply

            # Criteria for exact-match only
            # Contains quoted or contains underscore then use exact match query
            - queryRegex: >-
                ["'].+["']|\S+_\S+
              simpleQuery: false
              prefixMatchQuery: true
              exactMatchQuery: true
              functionScore:
                functions:
                  - filter:
                      term:
                        materialized:
                          value: true
                    weight: 0.8
                  - filter:
                      term:
                        deprecated:
                          value: true
                    weight: 0
                score_mode: multiply
                boost_mode: multiply
            # default
            - queryRegex: .*
              simpleQuery: true
              prefixMatchQuery: true
              exactMatchQuery: true
              boolQuery:
                must_not:
                  term:
                    deprecated:
                      value: true
              functionScore:
                functions:
                  - filter:
                      term:
                        materialized:
                          value: true
                    weight: 0.8
                score_mode: multiply
                boost_mode: multiply

  kafka:
    bootstrap:
      server: "prerequisites-kafka:9092"
    zookeeper:
      server: "prerequisites-zookeeper:2181"
    # This section defines the names for the kafka topics that DataHub depends on, at a global level. Do not override this config
    # at a sub-chart level.
    topics:
      metadata_change_event_name: "MetadataChangeEvent_v4"
      failed_metadata_change_event_name: "FailedMetadataChangeEvent_v4"
      metadata_audit_event_name: "MetadataAuditEvent_v4"
      datahub_usage_event_name: "DataHubUsageEvent_v1"
      metadata_change_proposal_topic_name: "MetadataChangeProposal_v1"
      failed_metadata_change_proposal_topic_name: "FailedMetadataChangeProposal_v1"
      metadata_change_log_versioned_topic_name: "MetadataChangeLog_Versioned_v1"
      metadata_change_log_timeseries_topic_name: "MetadataChangeLog_Timeseries_v1"
      platform_event_topic_name: "PlatformEvent_v1"
      datahub_upgrade_history_topic_name: "DataHubUpgradeHistory_v1"
    maxMessageBytes: "5242880"  # 5MB
    producer:
      compressionType: none
      maxRequestSize: "5242880"  # 5MB
    consumer:
      maxPartitionFetchBytes: "5242880"  # 5MB
      stopContainerOnDeserializationError: false
    schemaregistry:
      type: INTERNAL
      
  neo4j:
    host: "prerequisites-neo4j:7474"
    uri: "bolt://prerequisites-neo4j"
    username: "neo4j"
    password:
      secretRef: neo4j-secrets
      secretKey: neo4j-password

  sql:
    datasource:
      host: "prerequisites-postgresql:5432"
      hostForpostgresqlClient: "prerequisites-postgresql"
      port: "5432"
      url: "jdbc:postgresql://prerequisites-postgresql:5432/datahub"
      driver: "org.postgresql.Driver"
      username: "postgres"
      password:
        secretRef: postgresql-secrets
        secretKey: postgres-password

  datahub:
    version: v0.13.2
    gms:
      protocol: "http"
      port: "8080"
      nodePort: "30001"

    frontend:
      validateSignUpEmail: true

    monitoring:
      enablePrometheus: true
      portName: jmx

    mae_consumer:
      port: "9091"
      nodePort: "30002"

    appVersion: "1.0"
    systemUpdate:
      ## The following options control settings for datahub-upgrade job which will
      ## managed ES indices and other update related work
      enabled: true

    encryptionKey:
      secretRef: "datahub-encryption-secrets"
      secretKey: "encryption_key_secret"
      # Set to false if you'd like to provide your own secret.
      provisionSecret:
        enabled: true
        autoGenerate: true
        annotations: {}

    managed_ingestion:
      enabled: true
      defaultCliVersion: "0.13.1.2"

    metadata_service_authentication:
      enabled: true
      systemClientId: "__datahub_system"
      systemClientSecret:
        secretRef: "datahub-auth-secrets"
        secretKey: "system_client_secret"
      tokenService:
        signingKey:
          secretRef: "datahub-auth-secrets"
          secretKey: "token_service_signing_key"
        salt:
          secretRef: "datahub-auth-secrets"
          secretKey: "token_service_salt"
      # Set to false if you'd like to provide your own auth secrets
      provisionSecrets:
        enabled: true
        autoGenerate: true
        annotations: {}

    ## Enables always emitting a MCL even when no changes are detected. Used for Time Based Lineage when no changes occur.
    alwaysEmitChangeLog: false

    ## Enables diff mode for graph writes, uses a different code path that produces a diff from previous to next to write relationships instead of wholesale deleting edges and reading
    enableGraphDiffMode: true

    ## Values specific to the unified search and browse feature.
    search_and_browse:
      show_search_v2: true  # If on, show the new search filters experience as of v0.10.5
      show_browse_v2: true  # If on, show the new browse experience as of v0.10.5
      backfill_browse_v2: true  # If on, run the backfill upgrade job that generates default browse paths for relevant entities

